services:
  bgs-backend:
    image: ${APP_NAME}:latest
    container_name: ${APP_NAME}
    build:
      context: ./
      dockerfile: Dockerfile
      args:
        HOME_DIR: ${HOME_DIR}
        DATA_DIR: ${DATA_DIR}
        CONTAINER_USER: ${CONTAINER_USER}
        CONTAINER_GROUP: ${CONTAINER_GROUP}
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.${APP_NAME}.rule=Host(`${SERVER_URL}`)"
      - "traefik.http.routers.${APP_NAME}.entrypoints=websecure"
      - "traefik.http.routers.${APP_NAME}.tls.certresolver=myresolver"
    environment:
      HOME: '${HOME_DIR}'
      DATA_DIR: '${DATA_DIR}'
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
      SPRING_DATASOURCE_USERNAME: '${PG_USER}'
      SPRING_DATASOURCE_PASSWORD: '${PG_PASSWORD}'
      GIT_TOKEN: '${GIT_TOKEN}'
    ports:
      - '${APP_PORT}'
    volumes:
      - app-data:${DATA_DIR}
    networks:
      - tasks-network
    depends_on:
      postgres:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '3'
          memory: 6G

  postgres:
    image: postgres:latest
    container_name: ${PG_HOST}
    restart: always
    environment:
      POSTGRES_DB: '${PG_DATABASE}'
      POSTGRES_USER: '${PG_USER}'
      POSTGRES_PASSWORD: '${PG_PASSWORD}'
    networks:
      - tasks-network
    volumes:
      - db-data:/var/lib/postgres/data
    ports:
      - '${PG_PORT}'
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready --username=${PG_USER} --dbname=${PG_DATABASE} --port=${PG_PORT} -t 0" ]
      interval: 5s
      timeout: 10s
      retries: 5

  reverse-proxy:
    image: traefik:latest
    command:
      - "--providers.docker"
      - "--providers.docker.exposedbydefault=false"
      # configure https
      - "--entryPoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=mail@${SERVER_URL}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      # Redirecting http Requests to https
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - ${APP_NAME}
    volumes:
      - letsencrypt:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock # Enable Traefik docker listening
    networks:
      - tasks-network

networks:
  tasks-network:
    driver: bridge
volumes:
  app-data:
  db-data:
  letsencrypt:
